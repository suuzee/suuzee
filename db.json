{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cover/source/1.ico","path":"1.ico","modified":1,"renderable":1},{"_id":"themes/cover/source/1.png","path":"1.png","modified":1,"renderable":1},{"_id":"themes/cover/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/cover/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cover/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/cover/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/cover/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/cover/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/cover/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/cover/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/cover/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/cover/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/cover/source/js/cover.js","path":"js/cover.js","modified":1,"renderable":1},{"_id":"themes/cover/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/cover/source/js/jquery.anystretch.min.js","path":"js/jquery.anystretch.min.js","modified":1,"renderable":1},{"_id":"themes/cover/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/cover/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/cover/source/logo.png","path":"logo.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/cover/LICENSE","hash":"c6f301bc722f0af3a55267a36c1c147aeddc6e46","modified":1488030926000},{"_id":"themes/cover/README.md","hash":"c94859a896534f4319ab5e66ca3bf254410f3ba2","modified":1488163336000},{"_id":"themes/cover/_config.yml","hash":"f270cf01019396e57dd6f7a5d9402435fefe4d12","modified":1488163336000},{"_id":"source/_posts/Redux.md","hash":"767f9eeede08f0542265ff49ee81494921c06552","modified":1488186296000},{"_id":"source/_posts/hello-world.md","hash":"ecfaa73bae0dd63e5771c89f8c1781dd52b274b2","modified":1488038152000},{"_id":"source/_posts/函数式编程.md","hash":"3f36740dd3ae8b5b9ed5d8eedca34a10983c50e4","modified":1488073521000},{"_id":"source/_posts/高性能JavaScript读书笔记（二）.md","hash":"33dd34792dc76aaebe44999029593ff2ab502829","modified":1488039239000},{"_id":"source/_posts/高性能JavaScript读书笔记（一）.md","hash":"76609e932fccb2a7521daae23a577769a09c7a2f","modified":1488038136000},{"_id":"themes/cover/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1488030926000},{"_id":"themes/cover/.git/config","hash":"fae61dba8e824aae19b9cee3eab058ff60bc204d","modified":1488030926000},{"_id":"themes/cover/.git/COMMIT_EDITMSG","hash":"1ab3b5fa9f0ec9337519f53b6f00322f38ab282b","modified":1488038703000},{"_id":"themes/cover/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1488030902000},{"_id":"themes/cover/.git/index","hash":"359de7e6ecc1d8b718bce9af0f541660c115eb00","modified":1488163337000},{"_id":"themes/cover/.git/packed-refs","hash":"24563d4e5b6387938598316ba7000627b368d55f","modified":1488030926000},{"_id":"themes/cover/_partial/about.ejs","hash":"6290945045a1e5f5729389ae9c759547b50d8526","modified":1488030926000},{"_id":"themes/cover/_partial/after_footer.ejs","hash":"382db26efbf21daaf4774b9e0deb659ebfed6695","modified":1488163336000},{"_id":"themes/cover/_partial/archive.ejs","hash":"37a3c0afc9f663e7b09be298ed430a150911eab2","modified":1488030926000},{"_id":"themes/cover/_partial/article.ejs","hash":"8e2cf8936c3a38f5d48c9d021affd8da30cb9e94","modified":1488030926000},{"_id":"themes/cover/_partial/comment.ejs","hash":"63fb218e684978ff59c5aeefbb04a039407771f4","modified":1488030926000},{"_id":"themes/cover/_partial/footer.ejs","hash":"349cb26d0954e73338a97a81b925357abca3aa9f","modified":1488163336000},{"_id":"themes/cover/_partial/duoshuo_comment.ejs","hash":"b0fcf44293a58cc171755732a6aafceee560c720","modified":1488030926000},{"_id":"themes/cover/_partial/google_analytics.ejs","hash":"98a27ce8a3d3e4596787b8661efc2a59b182c13a","modified":1488163336000},{"_id":"themes/cover/_partial/head.ejs","hash":"4250c89e5823d9555ae264899bf312ddc7f2b1cd","modified":1488163336000},{"_id":"themes/cover/_partial/header.ejs","hash":"f4b7b7cbadf169f0d02078cfb9ba2a9c617daec0","modified":1488030926000},{"_id":"themes/cover/_partial/pagination.ejs","hash":"846752ce5c56e65099b85e4f8beb3f404faa3618","modified":1488030926000},{"_id":"themes/cover/_partial/sidebar.ejs","hash":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1488030926000},{"_id":"themes/cover/_widget/category.ejs","hash":"8a2b90dc29661371f060f710668929c3588e15e4","modified":1488030926000},{"_id":"themes/cover/_partial/social.ejs","hash":"d246815abd0196be1ab5af3858e2eaf6c1891ac7","modified":1488030926000},{"_id":"themes/cover/_widget/recent_posts.ejs","hash":"f17d2cb69034acabea4df54f301f80812e7b84a8","modified":1488030926000},{"_id":"themes/cover/_widget/tag.ejs","hash":"1914db78bea49c333067d79fe7ad9567d2b08d00","modified":1488030926000},{"_id":"themes/cover/_widget/tagcloud.ejs","hash":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1488030926000},{"_id":"themes/cover/languages/de.yml","hash":"54e20e9fd30185f716612ffdfab33d1e58a6b09f","modified":1488038700000},{"_id":"themes/cover/languages/default.yml","hash":"bbcf20cbf05098b9b18456dce227a6eac6d92879","modified":1488030926000},{"_id":"themes/cover/_widget/search.ejs","hash":"55c707f3aa7453c305c41898ad22556edd213830","modified":1488030926000},{"_id":"themes/cover/languages/zh-CN.yml","hash":"6b82ae9f292bf5109d164c882e67156138b88769","modified":1488030926000},{"_id":"themes/cover/languages/es.yml","hash":"e59cbb8c99e8ce8b24707467afef799027a29e1c","modified":1488030926000},{"_id":"themes/cover/languages/zh-TW.yml","hash":"1b3279fc15df0f3cabc12455b0f9dc792e995a67","modified":1488030926000},{"_id":"themes/cover/layout/about.ejs","hash":"26b651b1f5c74eec69a484505df18d76851c4ffc","modified":1488030926000},{"_id":"themes/cover/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1488030926000},{"_id":"themes/cover/layout/blog.ejs","hash":"4056a42e31d525d25d6453e8e5a42d7cf3abc0ed","modified":1488030926000},{"_id":"themes/cover/layout/index.ejs","hash":"ce236075696b7ed7584b37edac346dcadfe20d2b","modified":1488031014000},{"_id":"themes/cover/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1488030926000},{"_id":"themes/cover/layout/layout.ejs","hash":"cce85bea73033170e02217760063a9b7a15f7037","modified":1488030926000},{"_id":"themes/cover/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1488030926000},{"_id":"themes/cover/layout/post.ejs","hash":"1173e49244299cf870a78831593153f63829cd68","modified":1488030926000},{"_id":"themes/cover/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1488030926000},{"_id":"themes/cover/source/1.ico","hash":"3f4d420a1e3b31d438dc53d97895b83d7c2c2f8f","modified":1488030926000},{"_id":"themes/cover/source/1.png","hash":"eba3c2cba05f3717dd4f8c6320432c6122673518","modified":1488030926000},{"_id":"themes/cover/source/favicon.ico","hash":"987461fe8d99355a153a3d85923ceb7ef67ef9b0","modified":1488031035000},{"_id":"themes/cover/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1488030902000},{"_id":"themes/cover/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1488030902000},{"_id":"themes/cover/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1488030902000},{"_id":"themes/cover/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1488030902000},{"_id":"themes/cover/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1488030902000},{"_id":"themes/cover/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1488030902000},{"_id":"themes/cover/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1488030902000},{"_id":"themes/cover/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1488030902000},{"_id":"themes/cover/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1488030902000},{"_id":"themes/cover/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1488030902000},{"_id":"themes/cover/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1488030902000},{"_id":"themes/cover/.git/logs/HEAD","hash":"11106faaf7272516d6293a3f2c4f2ae388384e4f","modified":1488038703000},{"_id":"themes/cover/_partial/post/category.ejs","hash":"18a1629b0e165d3c413b2fe28044c8a6d9e324a5","modified":1488030926000},{"_id":"themes/cover/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1488030926000},{"_id":"themes/cover/_partial/post/share.ejs","hash":"47410ddce37e33e10a4d606165a19b890c7e5846","modified":1488163336000},{"_id":"themes/cover/_partial/post/tag.ejs","hash":"1aeabf7107b7f8ad95cd19d904fed977bd23be26","modified":1488030926000},{"_id":"themes/cover/_partial/post/title.ejs","hash":"1a54a1a857680f3de53e1a4873c6522d357aff98","modified":1488030926000},{"_id":"themes/cover/layout/_partial/about.ejs","hash":"6290945045a1e5f5729389ae9c759547b50d8526","modified":1488030926000},{"_id":"themes/cover/layout/_partial/after_footer.ejs","hash":"382db26efbf21daaf4774b9e0deb659ebfed6695","modified":1488163336000},{"_id":"themes/cover/layout/_partial/article.ejs","hash":"e95101e852e0b677bf2daabc8696eff9594cff01","modified":1488034814000},{"_id":"themes/cover/layout/_partial/archive.ejs","hash":"37a3c0afc9f663e7b09be298ed430a150911eab2","modified":1488030926000},{"_id":"themes/cover/layout/_partial/comment.ejs","hash":"63fb218e684978ff59c5aeefbb04a039407771f4","modified":1488030926000},{"_id":"themes/cover/layout/_partial/duoshuo_comment.ejs","hash":"b0fcf44293a58cc171755732a6aafceee560c720","modified":1488030926000},{"_id":"themes/cover/layout/_partial/footer.ejs","hash":"349cb26d0954e73338a97a81b925357abca3aa9f","modified":1488163336000},{"_id":"themes/cover/layout/_partial/google_analytics.ejs","hash":"98a27ce8a3d3e4596787b8661efc2a59b182c13a","modified":1488163336000},{"_id":"themes/cover/layout/_partial/head.ejs","hash":"4250c89e5823d9555ae264899bf312ddc7f2b1cd","modified":1488163336000},{"_id":"themes/cover/layout/_partial/header.ejs","hash":"f4b7b7cbadf169f0d02078cfb9ba2a9c617daec0","modified":1488030926000},{"_id":"themes/cover/layout/_partial/pagination.ejs","hash":"846752ce5c56e65099b85e4f8beb3f404faa3618","modified":1488030926000},{"_id":"themes/cover/layout/_partial/sidebar.ejs","hash":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1488030926000},{"_id":"themes/cover/layout/_partial/social.ejs","hash":"d246815abd0196be1ab5af3858e2eaf6c1891ac7","modified":1488030926000},{"_id":"themes/cover/layout/_widget/category.ejs","hash":"8a2b90dc29661371f060f710668929c3588e15e4","modified":1488030926000},{"_id":"themes/cover/layout/_widget/recent_posts.ejs","hash":"f17d2cb69034acabea4df54f301f80812e7b84a8","modified":1488030926000},{"_id":"themes/cover/layout/_widget/search.ejs","hash":"55c707f3aa7453c305c41898ad22556edd213830","modified":1488030926000},{"_id":"themes/cover/layout/_widget/tag.ejs","hash":"1914db78bea49c333067d79fe7ad9567d2b08d00","modified":1488030926000},{"_id":"themes/cover/layout/_widget/tagcloud.ejs","hash":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1488030926000},{"_id":"themes/cover/source/css/style.styl","hash":"c03b2520e4a85b981e29516cadc0a365e6500e3d","modified":1488030926000},{"_id":"themes/cover/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488030926000},{"_id":"themes/cover/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488030926000},{"_id":"themes/cover/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488030926000},{"_id":"themes/cover/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488030926000},{"_id":"themes/cover/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488030926000},{"_id":"themes/cover/source/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488030926000},{"_id":"themes/cover/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488030926000},{"_id":"themes/cover/source/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488030926000},{"_id":"themes/cover/source/js/cover.js","hash":"fa05b3ca8519e6c9ea8032a1f3e9648faecaf8d5","modified":1488030926000},{"_id":"themes/cover/source/js/gallery.js","hash":"485007dc8d6d1c6e11ef9036f64bfb7b51542b93","modified":1488030926000},{"_id":"themes/cover/source/js/jquery.anystretch.min.js","hash":"acabd20d62c4538392b398a25797d95add078277","modified":1488030926000},{"_id":"themes/cover/source/js/bootstrap.min.js","hash":"0a5258ab60dd5ca854552a18d2926a271b78bbc4","modified":1488163336000},{"_id":"themes/cover/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1488030926000},{"_id":"themes/cover/source/css/_base/utils.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488030926000},{"_id":"themes/cover/source/logo.png","hash":"c6569f5d92db67a55e74bc41fbd854da8474879a","modified":1488031035000},{"_id":"themes/cover/.git/refs/heads/master","hash":"2a78b3fdb19468bd42a3232abc79bf374188005e","modified":1488038703000},{"_id":"themes/cover/.git/objects/0f/1d0005ffa38153ef5d96101953bd096ffb3899","hash":"a5ccc109c495e020daa05f10511ed8659fed86a7","modified":1488038703000},{"_id":"themes/cover/.git/objects/00/6d9740963ce680852954da4bc58c5dd0fa19ae","hash":"a0f4badc027a2f415ef0322e8224105e64755669","modified":1488031123000},{"_id":"themes/cover/.git/objects/34/d36c1562d7a88ae28b26d2dbebade2bc14802e","hash":"c9808789fe287dc484c8e4a5160c5455df328cd1","modified":1488038505000},{"_id":"themes/cover/.git/objects/43/8d0184a2d641388dd7e095c322def2b98fde34","hash":"859d797ba681407a81ca0ffc172900d623a0ee7c","modified":1488038703000},{"_id":"themes/cover/.git/objects/2e/a1739900944d83a4392653da90487972686dea","hash":"275e250c044d42c9c3ff8d72da5b7efc64edc77b","modified":1488031123000},{"_id":"themes/cover/.git/objects/49/2e4e97dcb8aac14827c9b29cb348cf7295d395","hash":"f35ceb25df4d709ed73ea8a015d0bf6c4b541d78","modified":1488038702000},{"_id":"themes/cover/.git/objects/5e/3ceba3493c28e90b449a4ac7595c2972d085a6","hash":"8e16bab92145efcf2cc52c107c89574467418031","modified":1488038703000},{"_id":"themes/cover/.git/objects/4f/787cdaabdeba94389640b61f311a47e2653b10","hash":"24835118e7539777fd53ef9d1723130e354208e2","modified":1488038521000},{"_id":"themes/cover/.git/objects/58/b962adaccb49fc9488b87950bd13a25dea325f","hash":"ba8ca882e13b51987cdb07917d8e4064da56b6ce","modified":1488038521000},{"_id":"themes/cover/.git/objects/61/dfa6abc8e1430b9059b71714c2649844a47191","hash":"c92748b427af26f0f9380a38ea46e177831d7a84","modified":1488031123000},{"_id":"themes/cover/.git/objects/58/57237ac6119743d91cf658fa5fdb6a3650c078","hash":"4db0e25d52aa93613fce31115fa5464a8a700ee9","modified":1488031123000},{"_id":"themes/cover/.git/objects/82/1027c2f252655e854a996352c36aa8f80b2c97","hash":"7335221d88c9dbce6741038e572868a573595b4f","modified":1488038505000},{"_id":"themes/cover/.git/objects/7e/e511ee40ca9190f64c31694a7bdd309ae9400f","hash":"eb3f87308eba06a88a1c060f1f3227e741184ecd","modified":1488031112000},{"_id":"themes/cover/.git/objects/7a/59c51ea5730cf1fde78709327e6d12b24d2be0","hash":"f4a264d69e6a0f4b123d27b7f280f614ce422832","modified":1488031112000},{"_id":"themes/cover/.git/objects/a1/64227f2d5d8524c5f8c18dd32480d5222f8508","hash":"60b57e36e124b0f0e76fcf6f7ae3455e113a8e13","modified":1488038521000},{"_id":"themes/cover/.git/objects/84/d9550c6c206ebaa20b23fdb510dcc049db2fb5","hash":"ef12253a9e43524291e32438d553a7e4b5648199","modified":1488031112000},{"_id":"themes/cover/.git/objects/d2/7bf3f79e131de383c42f94b62d3022b640e111","hash":"a05449e3683ff9a29c4ba2d16bc68317ab81b6a6","modified":1488038505000},{"_id":"themes/cover/.git/objects/9e/e2ed41a6adb89afe671f00db677bd87acc1521","hash":"e060ed074f5e34a0815b44b5c283a7d19a091d9f","modified":1488038521000},{"_id":"themes/cover/.git/objects/df/e25fbbb13f518962d6115a43189dbc93f1db5e","hash":"b57ed89b0ca817eb239f420fa848880075aaf7f1","modified":1488038521000},{"_id":"themes/cover/.git/objects/pack/pack-317d3a4cdd767d944fd5914469c53c9b692fe95e.idx","hash":"5b8089021fab8c8645b7221a56b8e32aeedef4c3","modified":1488030926000},{"_id":"themes/cover/layout/_partial/post/category.ejs","hash":"18a1629b0e165d3c413b2fe28044c8a6d9e324a5","modified":1488030926000},{"_id":"themes/cover/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1488030926000},{"_id":"themes/cover/layout/_partial/post/share.ejs","hash":"47410ddce37e33e10a4d606165a19b890c7e5846","modified":1488163336000},{"_id":"themes/cover/layout/_partial/post/tag.ejs","hash":"1aeabf7107b7f8ad95cd19d904fed977bd23be26","modified":1488030926000},{"_id":"themes/cover/layout/_partial/post/title.ejs","hash":"1a54a1a857680f3de53e1a4873c6522d357aff98","modified":1488030926000},{"_id":"themes/cover/source/css/_base/layout.styl","hash":"cb1eefe4450c9db93d31ddd7d21a30e63f9e6d1c","modified":1488030926000},{"_id":"themes/cover/source/css/_partial/archive.styl","hash":"7abd8b341db48b556c014eb7719cc273c7cd40b8","modified":1488030926000},{"_id":"themes/cover/source/css/_partial/article.styl","hash":"bd6f38e9ffd90f5673447955dca2077d6f4e398d","modified":1488030926000},{"_id":"themes/cover/source/css/_base/variable.styl","hash":"9877585263adbb5da09bbd8527858282168b0450","modified":1488030926000},{"_id":"themes/cover/source/css/_partial/header.styl","hash":"d6cf99f2d73be17a9c9752c2a6e798bc1ed83c7c","modified":1488030926000},{"_id":"themes/cover/source/css/_partial/comment.styl","hash":"9af2d4e66691b4da0803ff2ecbb8b714285608c8","modified":1488030926000},{"_id":"themes/cover/source/css/_partial/index.styl","hash":"e4327e673c01c742650b1354bbb8fa1e0ed31bfd","modified":1488030926000},{"_id":"themes/cover/source/css/_partial/footer.styl","hash":"7879bbf2c193de70be4154efdbb2300c74838c73","modified":1488030926000},{"_id":"themes/cover/source/css/_partial/sidebar.styl","hash":"2ce38e585eb6321a393f097a14f0dd62be413ce5","modified":1488030926000},{"_id":"themes/cover/source/css/_partial/syntax.styl","hash":"6dac3435a74faa483cb98e86847a715c57f01644","modified":1488163336000},{"_id":"themes/cover/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1488030926000},{"_id":"themes/cover/.git/logs/refs/heads/master","hash":"11106faaf7272516d6293a3f2c4f2ae388384e4f","modified":1488038703000},{"_id":"themes/cover/.git/refs/remotes/origin/master","hash":"2a78b3fdb19468bd42a3232abc79bf374188005e","modified":1488038712000},{"_id":"themes/cover/.git/objects/d0/f111b07c365723492d2ac7aa30ba373a2f14a3","hash":"7242d879a66b242c3aa81edcf21233ef6b0884d4","modified":1488031112000},{"_id":"themes/cover/.git/logs/refs/remotes/origin/master","hash":"0d33572cd3b8caf0d6bb8ef9a30c679d99e8ad18","modified":1488038712000},{"_id":"themes/cover/.git/logs/refs/remotes/origin/HEAD","hash":"07a4a9c1311d602814e4f36aaabaee8beb61044f","modified":1488030926000},{"_id":"themes/cover/.git/objects/pack/pack-317d3a4cdd767d944fd5914469c53c9b692fe95e.pack","hash":"3a6fe48595b53bd53a8d7304cfd9a8e6b0f1665e","modified":1488031112000}],"Category":[{"name":"Redux","_id":"ciznvpa4f000250rgi52qgdyi"},{"name":"函数式编程","_id":"ciznvpa4q000750rgsqt7gxp7"},{"name":"高性能JavaScript","_id":"ciznvpa4s000a50rgok3paip7"}],"Data":[],"Page":[],"Post":[{"title":"Redux","date":"2017-02-26T09:01:48.000Z","description":"了解Redux","_content":"\n早就知道 `Redux` 这个玩意儿，并且看过一些介绍，以及听过一次分享。但是，由于听分享的时候准备的不够充分，导致听不太懂。明天还会有个分享，所以打算看一下，准备准备。之前看的没有做笔记，并且不够专注，这次在这里写入我个人的理解。\n\n主要看阮一峰的 [Redux入门教程](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html) 。\n\n#### Redux\n","source":"_posts/Redux.md","raw":"---\ntitle: Redux\ndate: 2017-02-26 17:01:48\ncategories: Redux\ntags:\n    - 学习笔记\n    - Redux\ndescription: 了解Redux\n---\n\n早就知道 `Redux` 这个玩意儿，并且看过一些介绍，以及听过一次分享。但是，由于听分享的时候准备的不够充分，导致听不太懂。明天还会有个分享，所以打算看一下，准备准备。之前看的没有做笔记，并且不够专注，这次在这里写入我个人的理解。\n\n主要看阮一峰的 [Redux入门教程](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html) 。\n\n#### Redux\n","slug":"Redux","published":1,"updated":"2017-02-27T09:04:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznvpa47000050rgkoke4muj","content":"<p>早就知道 <code>Redux</code> 这个玩意儿，并且看过一些介绍，以及听过一次分享。但是，由于听分享的时候准备的不够充分，导致听不太懂。明天还会有个分享，所以打算看一下，准备准备。之前看的没有做笔记，并且不够专注，这次在这里写入我个人的理解。</p>\n<p>主要看阮一峰的 <a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\" target=\"_blank\" rel=\"external\">Redux入门教程</a> 。</p>\n<h4 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h4>","excerpt":"","more":"<p>早就知道 <code>Redux</code> 这个玩意儿，并且看过一些介绍，以及听过一次分享。但是，由于听分享的时候准备的不够充分，导致听不太懂。明天还会有个分享，所以打算看一下，准备准备。之前看的没有做笔记，并且不够专注，这次在这里写入我个人的理解。</p>\n<p>主要看阮一峰的 <a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\">Redux入门教程</a> 。</p>\n<h4 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h4>"},{"title":"Hello World","_content":"\n[搭建以及使用各种特效](http://www.jianshu.com/p/a52b68794a6b)<!--more-->\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\n[搭建以及使用各种特效](http://www.jianshu.com/p/a52b68794a6b)<!--more-->\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-02-06T04:16:18.000Z","updated":"2017-02-25T15:55:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznvpa4b000150rgpts9m7wp","content":"<p><a href=\"http://www.jianshu.com/p/a52b68794a6b\" target=\"_blank\" rel=\"external\">搭建以及使用各种特效</a><a id=\"more\"></a></p>\n<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p><a href=\"http://www.jianshu.com/p/a52b68794a6b\">搭建以及使用各种特效</a></p>","more":"<p></p>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"函数式编程","date":"2017-02-26T00:17:48.000Z","description":"了解函数式编程","_content":"\n#### 纯函数<!--more-->\n\n```javascript\nfunction add (x, y) {\n    return x + y;\n}\n```\n\n大多数的纯函数都应该有至少一个参数。\n\n所有的纯函数都应该返回一些东西。\n\n纯函数对于给定的输入，总是产生相同的输出。\n\n纯函数没有函数副作用。\n\n纯函数有可缓存性。\n\n我的理解：纯函数不依赖任何出了传入参数给定的东西。比如外部变量，获取个系统时间之类的，因为输入相同，输出一定要相同。\n\n#### 不可变性\n\n在函数式编程中没有变量。也就是说即使传入的参数，到了执行的时候也不能被改变。里面任何时候定义的变量也都不能改，被声明时赋值了什么就是什么。\n\n函数式编程通过拷贝处理但只修改。🤔\n\n没有循环，不能用for之类的，用递归。递归不会修改旧值，但是使用了旧值的计算结果。\n\n```javascript\nfunction sumRange (start, end, acc) {\n    if (start > end) {\n        return acc;\n    }\n    return sumRange(start + 1, end, acc + start);\n}\nconsole.log(sumRange(1, 10, 0)) // 55\n```\n\n这里函数内部并没有改变参数的值，但是在递归调用的时候可能会对参数值进行重新赋值，这就是使用了旧值的计算结果，但是那是另一个函数了。\n\n不可变性的好处：不可变性创建了更简单安全的代码。🤔\n\n#### 函数柯里化\n\n定义：传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。\n\n```javascript\nfunction add (x) {\n    return function (y) {\n        return x + y;\n    }\n}\nadd(1)(2); // 3\n\nvar add10 = add(10);\nadd10(20); // 30\n```\n\n#### 函数组合\n\n函数组合就是传入几个参数，然后在定义函数组合的函数中执行这几个参数，或者在return的函数中执行这几个参数。\n\n```javascript\nvar compose = (f, g) => (x => f(g(x)));\n\nvar foo = x => x + 1;\nvar bar = x => x * 5;\n\ncompose(foo, bar)(2); // 11\n```\n\n#### Point Free\n\n#### 声明式与命令式代码\n\n命令式代码就是每一步都是指定去做。\n\n```javascript\nvar CEOs = [];\nfor (var i = 0, len = companies.length; i < len; i ++) {\n    CEOs.push(companies[i].CEO);\n}\n```\n\n声明式代码是通过写表达式的方式来声明我们想干什么。声明的是做什么。\n\n```javascript\nvar CEOs = companies.map(c => c.CEO);\n```\n\n#### 容器、Functor\n\n容器就是讲给定的值包裹起来，可能还有其他的一些作用。比如说衣服将人包裹起来，还有保暖，遮体的作用，脱掉了衣服人还是人。\n\n例子能看明白怎么实现，但是不是很理解：\n```javascript\nvar Container = function (x) {\n    this.__value = x;\n}\nContainer.of = x => new Container(x);\nContainer.prototype.map = f => Container.of(f(this.__value));\n\nContainer.of(3)\n    .map(x => x + 1) // Container(4)\n    .map(x => 'Result is ' + x); // Container('Result is 4')\n```\n\n执行的时候感觉有问题，每次调用 `Container.of` 的时候，都是返回一个新的Container对象，这几个对象不是一个。也就是说上面的链式调用每个都是一个新的 `Container` ，而map中用到的 `this.__value` 就是 `undefined` 了。\n","source":"_posts/函数式编程.md","raw":"---\ntitle: 函数式编程\ndate: 2017-02-26 08:17:48\ncategories: 函数式编程\ntags:\n    - 学习笔记\n    - 函数式编程\ndescription: 了解函数式编程\n---\n\n#### 纯函数<!--more-->\n\n```javascript\nfunction add (x, y) {\n    return x + y;\n}\n```\n\n大多数的纯函数都应该有至少一个参数。\n\n所有的纯函数都应该返回一些东西。\n\n纯函数对于给定的输入，总是产生相同的输出。\n\n纯函数没有函数副作用。\n\n纯函数有可缓存性。\n\n我的理解：纯函数不依赖任何出了传入参数给定的东西。比如外部变量，获取个系统时间之类的，因为输入相同，输出一定要相同。\n\n#### 不可变性\n\n在函数式编程中没有变量。也就是说即使传入的参数，到了执行的时候也不能被改变。里面任何时候定义的变量也都不能改，被声明时赋值了什么就是什么。\n\n函数式编程通过拷贝处理但只修改。🤔\n\n没有循环，不能用for之类的，用递归。递归不会修改旧值，但是使用了旧值的计算结果。\n\n```javascript\nfunction sumRange (start, end, acc) {\n    if (start > end) {\n        return acc;\n    }\n    return sumRange(start + 1, end, acc + start);\n}\nconsole.log(sumRange(1, 10, 0)) // 55\n```\n\n这里函数内部并没有改变参数的值，但是在递归调用的时候可能会对参数值进行重新赋值，这就是使用了旧值的计算结果，但是那是另一个函数了。\n\n不可变性的好处：不可变性创建了更简单安全的代码。🤔\n\n#### 函数柯里化\n\n定义：传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。\n\n```javascript\nfunction add (x) {\n    return function (y) {\n        return x + y;\n    }\n}\nadd(1)(2); // 3\n\nvar add10 = add(10);\nadd10(20); // 30\n```\n\n#### 函数组合\n\n函数组合就是传入几个参数，然后在定义函数组合的函数中执行这几个参数，或者在return的函数中执行这几个参数。\n\n```javascript\nvar compose = (f, g) => (x => f(g(x)));\n\nvar foo = x => x + 1;\nvar bar = x => x * 5;\n\ncompose(foo, bar)(2); // 11\n```\n\n#### Point Free\n\n#### 声明式与命令式代码\n\n命令式代码就是每一步都是指定去做。\n\n```javascript\nvar CEOs = [];\nfor (var i = 0, len = companies.length; i < len; i ++) {\n    CEOs.push(companies[i].CEO);\n}\n```\n\n声明式代码是通过写表达式的方式来声明我们想干什么。声明的是做什么。\n\n```javascript\nvar CEOs = companies.map(c => c.CEO);\n```\n\n#### 容器、Functor\n\n容器就是讲给定的值包裹起来，可能还有其他的一些作用。比如说衣服将人包裹起来，还有保暖，遮体的作用，脱掉了衣服人还是人。\n\n例子能看明白怎么实现，但是不是很理解：\n```javascript\nvar Container = function (x) {\n    this.__value = x;\n}\nContainer.of = x => new Container(x);\nContainer.prototype.map = f => Container.of(f(this.__value));\n\nContainer.of(3)\n    .map(x => x + 1) // Container(4)\n    .map(x => 'Result is ' + x); // Container('Result is 4')\n```\n\n执行的时候感觉有问题，每次调用 `Container.of` 的时候，都是返回一个新的Container对象，这几个对象不是一个。也就是说上面的链式调用每个都是一个新的 `Container` ，而map中用到的 `this.__value` 就是 `undefined` 了。\n","slug":"函数式编程","published":1,"updated":"2017-02-26T01:45:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznvpa4j000450rggu9y8oym","content":"<h4 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数<a id=\"more\"></a></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大多数的纯函数都应该有至少一个参数。</p>\n<p>所有的纯函数都应该返回一些东西。</p>\n<p>纯函数对于给定的输入，总是产生相同的输出。</p>\n<p>纯函数没有函数副作用。</p>\n<p>纯函数有可缓存性。</p>\n<p>我的理解：纯函数不依赖任何出了传入参数给定的东西。比如外部变量，获取个系统时间之类的，因为输入相同，输出一定要相同。</p>\n<h4 id=\"不可变性\"><a href=\"#不可变性\" class=\"headerlink\" title=\"不可变性\"></a>不可变性</h4><p>在函数式编程中没有变量。也就是说即使传入的参数，到了执行的时候也不能被改变。里面任何时候定义的变量也都不能改，被声明时赋值了什么就是什么。</p>\n<p>函数式编程通过拷贝处理但只修改。🤔</p>\n<p>没有循环，不能用for之类的，用递归。递归不会修改旧值，但是使用了旧值的计算结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumRange</span> (<span class=\"params\">start, end, acc</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> acc;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sumRange(start + <span class=\"number\">1</span>, end, acc + start);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(sumRange(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>)) <span class=\"comment\">// 55</span></div></pre></td></tr></table></figure>\n<p>这里函数内部并没有改变参数的值，但是在递归调用的时候可能会对参数值进行重新赋值，这就是使用了旧值的计算结果，但是那是另一个函数了。</p>\n<p>不可变性的好处：不可变性创建了更简单安全的代码。🤔</p>\n<h4 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h4><p>定义：传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>); <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> add10 = add(<span class=\"number\">10</span>);</div><div class=\"line\">add10(<span class=\"number\">20</span>); <span class=\"comment\">// 30</span></div></pre></td></tr></table></figure>\n<h4 id=\"函数组合\"><a href=\"#函数组合\" class=\"headerlink\" title=\"函数组合\"></a>函数组合</h4><p>函数组合就是传入几个参数，然后在定义函数组合的函数中执行这几个参数，或者在return的函数中执行这几个参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> compose = <span class=\"function\">(<span class=\"params\">f, g</span>) =&gt;</span> (<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> f(g(x)));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\">compose(foo, bar)(<span class=\"number\">2</span>); <span class=\"comment\">// 11</span></div></pre></td></tr></table></figure>\n<h4 id=\"Point-Free\"><a href=\"#Point-Free\" class=\"headerlink\" title=\"Point Free\"></a>Point Free</h4><h4 id=\"声明式与命令式代码\"><a href=\"#声明式与命令式代码\" class=\"headerlink\" title=\"声明式与命令式代码\"></a>声明式与命令式代码</h4><p>命令式代码就是每一步都是指定去做。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CEOs = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = companies.length; i &lt; len; i ++) &#123;</div><div class=\"line\">    CEOs.push(companies[i].CEO);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>声明式代码是通过写表达式的方式来声明我们想干什么。声明的是做什么。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CEOs = companies.map(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.CEO);</div></pre></td></tr></table></figure>\n<h4 id=\"容器、Functor\"><a href=\"#容器、Functor\" class=\"headerlink\" title=\"容器、Functor\"></a>容器、Functor</h4><p>容器就是讲给定的值包裹起来，可能还有其他的一些作用。比如说衣服将人包裹起来，还有保暖，遮体的作用，脱掉了衣服人还是人。</p>\n<p>例子能看明白怎么实现，但是不是很理解：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Container = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.__value = x;</div><div class=\"line\">&#125;</div><div class=\"line\">Container.of = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"keyword\">new</span> Container(x);</div><div class=\"line\">Container.prototype.map = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> Container.of(f(<span class=\"keyword\">this</span>.__value));</div><div class=\"line\"></div><div class=\"line\">Container.of(<span class=\"number\">3</span>)</div><div class=\"line\">    .map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>) <span class=\"comment\">// Container(4)</span></div><div class=\"line\">    .map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"string\">'Result is '</span> + x); <span class=\"comment\">// Container('Result is 4')</span></div></pre></td></tr></table></figure></p>\n<p>执行的时候感觉有问题，每次调用 <code>Container.of</code> 的时候，都是返回一个新的Container对象，这几个对象不是一个。也就是说上面的链式调用每个都是一个新的 <code>Container</code> ，而map中用到的 <code>this.__value</code> 就是 <code>undefined</code> 了。</p>\n","excerpt":"<h4 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h4>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大多数的纯函数都应该有至少一个参数。</p>\n<p>所有的纯函数都应该返回一些东西。</p>\n<p>纯函数对于给定的输入，总是产生相同的输出。</p>\n<p>纯函数没有函数副作用。</p>\n<p>纯函数有可缓存性。</p>\n<p>我的理解：纯函数不依赖任何出了传入参数给定的东西。比如外部变量，获取个系统时间之类的，因为输入相同，输出一定要相同。</p>\n<h4 id=\"不可变性\"><a href=\"#不可变性\" class=\"headerlink\" title=\"不可变性\"></a>不可变性</h4><p>在函数式编程中没有变量。也就是说即使传入的参数，到了执行的时候也不能被改变。里面任何时候定义的变量也都不能改，被声明时赋值了什么就是什么。</p>\n<p>函数式编程通过拷贝处理但只修改。🤔</p>\n<p>没有循环，不能用for之类的，用递归。递归不会修改旧值，但是使用了旧值的计算结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumRange</span> (<span class=\"params\">start, end, acc</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> acc;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sumRange(start + <span class=\"number\">1</span>, end, acc + start);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(sumRange(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>)) <span class=\"comment\">// 55</span></div></pre></td></tr></table></figure>\n<p>这里函数内部并没有改变参数的值，但是在递归调用的时候可能会对参数值进行重新赋值，这就是使用了旧值的计算结果，但是那是另一个函数了。</p>\n<p>不可变性的好处：不可变性创建了更简单安全的代码。🤔</p>\n<h4 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h4><p>定义：传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>); <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> add10 = add(<span class=\"number\">10</span>);</div><div class=\"line\">add10(<span class=\"number\">20</span>); <span class=\"comment\">// 30</span></div></pre></td></tr></table></figure>\n<h4 id=\"函数组合\"><a href=\"#函数组合\" class=\"headerlink\" title=\"函数组合\"></a>函数组合</h4><p>函数组合就是传入几个参数，然后在定义函数组合的函数中执行这几个参数，或者在return的函数中执行这几个参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> compose = <span class=\"function\">(<span class=\"params\">f, g</span>) =&gt;</span> (<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> f(g(x)));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\">compose(foo, bar)(<span class=\"number\">2</span>); <span class=\"comment\">// 11</span></div></pre></td></tr></table></figure>\n<h4 id=\"Point-Free\"><a href=\"#Point-Free\" class=\"headerlink\" title=\"Point Free\"></a>Point Free</h4><h4 id=\"声明式与命令式代码\"><a href=\"#声明式与命令式代码\" class=\"headerlink\" title=\"声明式与命令式代码\"></a>声明式与命令式代码</h4><p>命令式代码就是每一步都是指定去做。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CEOs = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = companies.length; i &lt; len; i ++) &#123;</div><div class=\"line\">    CEOs.push(companies[i].CEO);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>声明式代码是通过写表达式的方式来声明我们想干什么。声明的是做什么。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CEOs = companies.map(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.CEO);</div></pre></td></tr></table></figure>\n<h4 id=\"容器、Functor\"><a href=\"#容器、Functor\" class=\"headerlink\" title=\"容器、Functor\"></a>容器、Functor</h4><p>容器就是讲给定的值包裹起来，可能还有其他的一些作用。比如说衣服将人包裹起来，还有保暖，遮体的作用，脱掉了衣服人还是人。</p>\n<p>例子能看明白怎么实现，但是不是很理解：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Container = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.__value = x;</div><div class=\"line\">&#125;</div><div class=\"line\">Container.of = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"keyword\">new</span> Container(x);</div><div class=\"line\">Container.prototype.map = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> Container.of(f(<span class=\"keyword\">this</span>.__value));</div><div class=\"line\"></div><div class=\"line\">Container.of(<span class=\"number\">3</span>)</div><div class=\"line\">    .map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>) <span class=\"comment\">// Container(4)</span></div><div class=\"line\">    .map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"string\">'Result is '</span> + x); <span class=\"comment\">// Container('Result is 4')</span></div></pre></td></tr></table></figure></p>\n<p>执行的时候感觉有问题，每次调用 <code>Container.of</code> 的时候，都是返回一个新的Container对象，这几个对象不是一个。也就是说上面的链式调用每个都是一个新的 <code>Container</code> ，而map中用到的 <code>this.__value</code> 就是 <code>undefined</code> 了。</p>"},{"title":"高性能JavaScript读书笔记（二）","date":"2017-02-06T06:30:57.000Z","description":"读《高性能JavaScript》的时候的一些理解","_content":"读《高性能JavaScript》的时候的一些理解\n<!--more-->\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=394729&auto=0&height=66\"></iframe>\n\n### 第二章 数据存取\n\n执行函数的时候会创建一个被称为执行环境的内部对象。一个执行环境定义了一个一个函数执行时的环境，函数每次执行时，对应的执行环境都是独一无二的，也就是说每次调用这个函数都会创建不同的执行环境。函数执行完毕，执行环境就销毁。\n\n每个执行环境都有自己的作用域链，用来解析标识符（我的理解是变量）。执行函数的时候会有个搜索标识符的过程，这个过程会影响性能。而搜索变量的时候，会从作用域链一层层往上找，找到就用，找不到就接着找。所以越近的变量搜索过程越短，性能损失越小。所以要尽可能地缓存全局变量，来减少损耗。\n\n```javascript\nfunction changeColor () {\n    var doc = document,\n        oDiv1 = doc.getElementById('div1');\n    oDiv1.style.backgroundColor = '#000';\n}\n```\n`with` 语句可以把全局变量置于作用域链的头部，但是这是创建了一个新的作用域链，虽然全局变量好找了，但是局部变量却不好找了，更浪费性能。所以不推荐用with语句。\n\n`try-catch` 中的 `catch` 也可以改变作用域链，所有的局部变量会被放到新的作用域链里面，这样也会影响性能。 `try-catch` 语句可以适当使用，来避免不可预知的错误。建议在 `catch` 中处理错误通过调用函数的方式，这样不访问局部变量就会不会影响性能。\n\n#### 动态作用域\n\n`with` 、 `try-catch` 中 `catch` 子句、 `eval()` 都是动态作用域。\n\n动态作用域只存在函数执行过程中，不建议使用动态作用域，因为可能会改变变量的值。\n\n```javascript\nfunction excute (code) {\n    eval(code);\n\n    var w = window;\n\n    // 如果code是'var window = {}'，w 就不是真正的window了。\n}\n```\n\n#### 闭包、作用域和内存\n\n使用闭包时，闭包的 `[[Scope]]` 包含于执行环境作用域链相同的对象的引用，通常来说这些活动对象会随着执行环境销毁而销毁，但是闭包就不会。\n使用闭包时要注意：频繁访问跨作用域的标识符时，每次都会带来性能损失。\n\n#### 对象成员\n","source":"_posts/高性能JavaScript读书笔记（二）.md","raw":"---\ntitle: 高性能JavaScript读书笔记（二）\ndate: 2017-02-06 14:30:57\ncategories: 高性能JavaScript\ntags:\n    - 学习笔记\n    - 高性能JavaScript\ndescription: 读《高性能JavaScript》的时候的一些理解\n---\n读《高性能JavaScript》的时候的一些理解\n<!--more-->\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=394729&auto=0&height=66\"></iframe>\n\n### 第二章 数据存取\n\n执行函数的时候会创建一个被称为执行环境的内部对象。一个执行环境定义了一个一个函数执行时的环境，函数每次执行时，对应的执行环境都是独一无二的，也就是说每次调用这个函数都会创建不同的执行环境。函数执行完毕，执行环境就销毁。\n\n每个执行环境都有自己的作用域链，用来解析标识符（我的理解是变量）。执行函数的时候会有个搜索标识符的过程，这个过程会影响性能。而搜索变量的时候，会从作用域链一层层往上找，找到就用，找不到就接着找。所以越近的变量搜索过程越短，性能损失越小。所以要尽可能地缓存全局变量，来减少损耗。\n\n```javascript\nfunction changeColor () {\n    var doc = document,\n        oDiv1 = doc.getElementById('div1');\n    oDiv1.style.backgroundColor = '#000';\n}\n```\n`with` 语句可以把全局变量置于作用域链的头部，但是这是创建了一个新的作用域链，虽然全局变量好找了，但是局部变量却不好找了，更浪费性能。所以不推荐用with语句。\n\n`try-catch` 中的 `catch` 也可以改变作用域链，所有的局部变量会被放到新的作用域链里面，这样也会影响性能。 `try-catch` 语句可以适当使用，来避免不可预知的错误。建议在 `catch` 中处理错误通过调用函数的方式，这样不访问局部变量就会不会影响性能。\n\n#### 动态作用域\n\n`with` 、 `try-catch` 中 `catch` 子句、 `eval()` 都是动态作用域。\n\n动态作用域只存在函数执行过程中，不建议使用动态作用域，因为可能会改变变量的值。\n\n```javascript\nfunction excute (code) {\n    eval(code);\n\n    var w = window;\n\n    // 如果code是'var window = {}'，w 就不是真正的window了。\n}\n```\n\n#### 闭包、作用域和内存\n\n使用闭包时，闭包的 `[[Scope]]` 包含于执行环境作用域链相同的对象的引用，通常来说这些活动对象会随着执行环境销毁而销毁，但是闭包就不会。\n使用闭包时要注意：频繁访问跨作用域的标识符时，每次都会带来性能损失。\n\n#### 对象成员\n","slug":"高性能JavaScript读书笔记（二）","published":1,"updated":"2017-02-25T16:13:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznvpa4k000550rgz84xdt8n","content":"<p>读《高性能JavaScript》的时候的一些理解<br><a id=\"more\"></a></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=394729&auto=0&height=66\"></iframe>\n\n<h3 id=\"第二章-数据存取\"><a href=\"#第二章-数据存取\" class=\"headerlink\" title=\"第二章 数据存取\"></a>第二章 数据存取</h3><p>执行函数的时候会创建一个被称为执行环境的内部对象。一个执行环境定义了一个一个函数执行时的环境，函数每次执行时，对应的执行环境都是独一无二的，也就是说每次调用这个函数都会创建不同的执行环境。函数执行完毕，执行环境就销毁。</p>\n<p>每个执行环境都有自己的作用域链，用来解析标识符（我的理解是变量）。执行函数的时候会有个搜索标识符的过程，这个过程会影响性能。而搜索变量的时候，会从作用域链一层层往上找，找到就用，找不到就接着找。所以越近的变量搜索过程越短，性能损失越小。所以要尽可能地缓存全局变量，来减少损耗。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> doc = <span class=\"built_in\">document</span>,</div><div class=\"line\">        oDiv1 = doc.getElementById(<span class=\"string\">'div1'</span>);</div><div class=\"line\">    oDiv1.style.backgroundColor = <span class=\"string\">'#000'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>with</code> 语句可以把全局变量置于作用域链的头部，但是这是创建了一个新的作用域链，虽然全局变量好找了，但是局部变量却不好找了，更浪费性能。所以不推荐用with语句。</p>\n<p><code>try-catch</code> 中的 <code>catch</code> 也可以改变作用域链，所有的局部变量会被放到新的作用域链里面，这样也会影响性能。 <code>try-catch</code> 语句可以适当使用，来避免不可预知的错误。建议在 <code>catch</code> 中处理错误通过调用函数的方式，这样不访问局部变量就会不会影响性能。</p>\n<h4 id=\"动态作用域\"><a href=\"#动态作用域\" class=\"headerlink\" title=\"动态作用域\"></a>动态作用域</h4><p><code>with</code> 、 <code>try-catch</code> 中 <code>catch</code> 子句、 <code>eval()</code> 都是动态作用域。</p>\n<p>动态作用域只存在函数执行过程中，不建议使用动态作用域，因为可能会改变变量的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">excute</span> (<span class=\"params\">code</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">eval</span>(code);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> w = <span class=\"built_in\">window</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果code是'var window = &#123;&#125;'，w 就不是真正的window了。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"闭包、作用域和内存\"><a href=\"#闭包、作用域和内存\" class=\"headerlink\" title=\"闭包、作用域和内存\"></a>闭包、作用域和内存</h4><p>使用闭包时，闭包的 <code>[[Scope]]</code> 包含于执行环境作用域链相同的对象的引用，通常来说这些活动对象会随着执行环境销毁而销毁，但是闭包就不会。<br>使用闭包时要注意：频繁访问跨作用域的标识符时，每次都会带来性能损失。</p>\n<h4 id=\"对象成员\"><a href=\"#对象成员\" class=\"headerlink\" title=\"对象成员\"></a>对象成员</h4>","excerpt":"<p>读《高性能JavaScript》的时候的一些理解<br></p>","more":"<p></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=394729&auto=0&height=66\"></iframe>\n\n<h3 id=\"第二章-数据存取\"><a href=\"#第二章-数据存取\" class=\"headerlink\" title=\"第二章 数据存取\"></a>第二章 数据存取</h3><p>执行函数的时候会创建一个被称为执行环境的内部对象。一个执行环境定义了一个一个函数执行时的环境，函数每次执行时，对应的执行环境都是独一无二的，也就是说每次调用这个函数都会创建不同的执行环境。函数执行完毕，执行环境就销毁。</p>\n<p>每个执行环境都有自己的作用域链，用来解析标识符（我的理解是变量）。执行函数的时候会有个搜索标识符的过程，这个过程会影响性能。而搜索变量的时候，会从作用域链一层层往上找，找到就用，找不到就接着找。所以越近的变量搜索过程越短，性能损失越小。所以要尽可能地缓存全局变量，来减少损耗。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> doc = <span class=\"built_in\">document</span>,</div><div class=\"line\">        oDiv1 = doc.getElementById(<span class=\"string\">'div1'</span>);</div><div class=\"line\">    oDiv1.style.backgroundColor = <span class=\"string\">'#000'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>with</code> 语句可以把全局变量置于作用域链的头部，但是这是创建了一个新的作用域链，虽然全局变量好找了，但是局部变量却不好找了，更浪费性能。所以不推荐用with语句。</p>\n<p><code>try-catch</code> 中的 <code>catch</code> 也可以改变作用域链，所有的局部变量会被放到新的作用域链里面，这样也会影响性能。 <code>try-catch</code> 语句可以适当使用，来避免不可预知的错误。建议在 <code>catch</code> 中处理错误通过调用函数的方式，这样不访问局部变量就会不会影响性能。</p>\n<h4 id=\"动态作用域\"><a href=\"#动态作用域\" class=\"headerlink\" title=\"动态作用域\"></a>动态作用域</h4><p><code>with</code> 、 <code>try-catch</code> 中 <code>catch</code> 子句、 <code>eval()</code> 都是动态作用域。</p>\n<p>动态作用域只存在函数执行过程中，不建议使用动态作用域，因为可能会改变变量的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">excute</span> (<span class=\"params\">code</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">eval</span>(code);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> w = <span class=\"built_in\">window</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果code是'var window = &#123;&#125;'，w 就不是真正的window了。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"闭包、作用域和内存\"><a href=\"#闭包、作用域和内存\" class=\"headerlink\" title=\"闭包、作用域和内存\"></a>闭包、作用域和内存</h4><p>使用闭包时，闭包的 <code>[[Scope]]</code> 包含于执行环境作用域链相同的对象的引用，通常来说这些活动对象会随着执行环境销毁而销毁，但是闭包就不会。<br>使用闭包时要注意：频繁访问跨作用域的标识符时，每次都会带来性能损失。</p>\n<h4 id=\"对象成员\"><a href=\"#对象成员\" class=\"headerlink\" title=\"对象成员\"></a>对象成员</h4>"},{"title":"高性能JavaScript读书笔记（一）","date":"2017-02-06T06:30:56.000Z","description":"读《高性能JavaScript》的时候的一些理解","_content":"读《高性能JavaScript》的时候的一些理解<!--more-->\n\n#### 第一章 加载和执行\n\n占位\n","source":"_posts/高性能JavaScript读书笔记（一）.md","raw":"---\ntitle: 高性能JavaScript读书笔记（一）\ndate: 2017-02-06 14:30:56\ncategories: 高性能JavaScript\ntags:\n    - 学习笔记\n    - 高性能JavaScript\ndescription: 读《高性能JavaScript》的时候的一些理解\n---\n读《高性能JavaScript》的时候的一些理解<!--more-->\n\n#### 第一章 加载和执行\n\n占位\n","slug":"高性能JavaScript读书笔记（一）","published":1,"updated":"2017-02-25T15:55:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznvpa4p000650rgw0wkzq5q","content":"<p>读《高性能JavaScript》的时候的一些理解<a id=\"more\"></a></p>\n<h4 id=\"第一章-加载和执行\"><a href=\"#第一章-加载和执行\" class=\"headerlink\" title=\"第一章 加载和执行\"></a>第一章 加载和执行</h4><p>占位</p>\n","excerpt":"<p>读《高性能JavaScript》的时候的一些理解</p>","more":"<p></p>\n<h4 id=\"第一章-加载和执行\"><a href=\"#第一章-加载和执行\" class=\"headerlink\" title=\"第一章 加载和执行\"></a>第一章 加载和执行</h4><p>占位</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciznvpa47000050rgkoke4muj","category_id":"ciznvpa4f000250rgi52qgdyi","_id":"ciznvpa4s000950rg3er17ikw"},{"post_id":"ciznvpa4j000450rggu9y8oym","category_id":"ciznvpa4q000750rgsqt7gxp7","_id":"ciznvpa4w000d50rg4k0qv34j"},{"post_id":"ciznvpa4k000550rgz84xdt8n","category_id":"ciznvpa4s000a50rgok3paip7","_id":"ciznvpa4y000h50rgqsvayn4p"},{"post_id":"ciznvpa4p000650rgw0wkzq5q","category_id":"ciznvpa4s000a50rgok3paip7","_id":"ciznvpa4z000k50rgh8vjsspt"}],"PostTag":[{"post_id":"ciznvpa47000050rgkoke4muj","tag_id":"ciznvpa4i000350rg2nb55a9l","_id":"ciznvpa4w000c50rghfibbud3"},{"post_id":"ciznvpa47000050rgkoke4muj","tag_id":"ciznvpa4r000850rgzoojxi5b","_id":"ciznvpa4w000e50rgwv9x7n8q"},{"post_id":"ciznvpa4j000450rggu9y8oym","tag_id":"ciznvpa4i000350rg2nb55a9l","_id":"ciznvpa4y000j50rg7hma6h9i"},{"post_id":"ciznvpa4j000450rggu9y8oym","tag_id":"ciznvpa4w000f50rgh7488c88","_id":"ciznvpa4z000l50rgppzjh78a"},{"post_id":"ciznvpa4k000550rgz84xdt8n","tag_id":"ciznvpa4i000350rg2nb55a9l","_id":"ciznvpa4z000n50rg7dzzle78"},{"post_id":"ciznvpa4k000550rgz84xdt8n","tag_id":"ciznvpa4y000i50rgf4ur7pf4","_id":"ciznvpa4z000o50rgh7ip193x"},{"post_id":"ciznvpa4p000650rgw0wkzq5q","tag_id":"ciznvpa4i000350rg2nb55a9l","_id":"ciznvpa4z000p50rgo42r3u3k"},{"post_id":"ciznvpa4p000650rgw0wkzq5q","tag_id":"ciznvpa4y000i50rgf4ur7pf4","_id":"ciznvpa51000q50rgldumyjdb"}],"Tag":[{"name":"学习笔记","_id":"ciznvpa4i000350rg2nb55a9l"},{"name":"Redux","_id":"ciznvpa4r000850rgzoojxi5b"},{"name":"函数式编程","_id":"ciznvpa4w000f50rgh7488c88"},{"name":"高性能JavaScript","_id":"ciznvpa4y000i50rgf4ur7pf4"}]}}